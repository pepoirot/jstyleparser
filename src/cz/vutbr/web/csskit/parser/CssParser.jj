/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ./CssParser.jj */
/*@egen*//* Options for generated parser */
options {
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = true;
  IGNORE_CASE = true;
  STATIC = false;
}


/* API definition */
PARSER_BEGIN(CssParser)

package cz.vutbr.web.csskit.parser;

@SuppressWarnings("all")
public class CssParser/*@bgen(jjtree)*/implements CssParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTCssParserState jjtree = new JJTCssParserState();

/*@egen*/

}

PARSER_END(CssParser)

/* Skip comments */
SKIP :
{
  <SLASH_STAR_COMMENT: "/*" (~["*"])* ("*")+ (~["/","*"] (~["*"])* ("*")+)* "/" >
}

/* Tokens of exical analyzer */
TOKEN : 
{
  <#h : ["0"-"9", "a"-"f"]> |
  <#nonascii : ["\200"-"\377"]> |
  <#unicode : "\\" <h> (<h>)? (<h>)? (<h>)? (<h>)? (<h>)? ("\r\n"|[" ", "\t", "\r", "\n", "\f"])? > |
  <#escape : <unicode> | "\\" ~["\r", "\n", "\f", "0"-"9", "a"-"f"]> |
  <#nmstart : ["_", "a"-"z"] | <nonascii> | <escape>> |
  <#nmchar : ["_", "a"-"z", "0"-"9", "-"] | <nonascii> | <escape>> |
  <#string1 : "\"" (~["\n", "\r", "\f", "\""] | "\\" <nl> | <escape>)* "\""> |
  <#string2 : "'" (~["\n", "\r", "\f", "'"] | "\\" <nl> | <escape>)* "'"> |
  <#invalid1 : "\""(~["\n", "\r", "\f", "\""] | "\\" <nl> | <escape>)* > |
  <#invalid2	: "'"(~["\n", "\r", "\f", "'"] | "\\" <nl> | <escape>)* > |

  <#comment : "/*" (~["*"])* ("*")+ (~["/","*"] (~["*"])* ("*")+)* "/" > |
  <#ident : ("-")? <nmstart> (<nmchar>)* > |
  <#name : (<nmchar>)+ > |
  <#num : (["0"-"9"])+ | (["0"-"9"])* "." (["0"-"9"])+ > |
  <#string : <string1>|<string2> > |
  <#invalid : <invalid1>|<invalid2> > |
  <#url : ([";", "!", "#", "$", "%", "&", "*", "-", "~", ".", "/", ":", ",", "=", "?"] | <nmchar> )* > | 
  <#ss : ([" ", "\t", "\r", "\n", "\f"])+ > |
  <#w : (<ss>)? > |

  <#nl : "\n" | "\r\n" | "\r" | "\f"> |

  <#A : "a" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("41" | "61")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? > |
  <#C : "c" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("43" | "63")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? > |
  <#D : "d" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("44" | "64")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? > |
  <#E : "e" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("45" | "65")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? > |
  <#G : "g" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("47" | "67")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\g"> |
  <#H : "h" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("48" | "68")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\h"> |
  <#I : "i" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("49" | "69")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\i"> |
  <#K : "k" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("4b" | "6b")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\k"> |
  <#M : "m" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("4d" | "6d")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\m"> |
  <#N : "n" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("4e" | "6e")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\n"> |
  <#O : "o" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("51" | "71")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\o"> |
  <#P : "p" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("50" | "70")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\p"> |
  <#R : "r" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("52" | "72")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\r"> |
  <#S : "s" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("53" | "73")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\s"> |
  <#T : "t" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("54" | "74")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\t"> |
  <#X : "x" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("58" | "78")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\x"> |
  <#Z : "z" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("5a" | "7a")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\z"> |

  <BLANK : <ss> > |

  <CDO : "<!--" > |
  <CDC : "-->" > |
  <EQUAL : "=" > |
  <INCLUDES : "~=" > |
  <DASHMATCH : "|=" > |

  <LBRACE : <w> "{" > |
  <PLUS : <w> "+" > |
  <MINUS : <w> "-" > |
  <GREATER : <w> ">" > |
  <COMMA : <w> "," > |
  <STRING : <string> > |
  <INVALID : <invalid> > |
  <IDENT : <ident> > |

  <HASH : "#" <name> > |

  <IMPORT_SYM : "@" <I> <M> <P> <O> <R> <T> > |
  <PAGE_SYM : "@" <P> <A> <G> <E> > |
  <MEDIA_SYM : "@" <M> <E> <D> <I> <A> > |
  <CHARSET_SYM : "@" <C> <H> <A> <R> <S> <E> <T> > |

  <IMPORTANT_SYM : "!" (<w>|<comment>)* <I> <M> <P> <O> <R> <T> <A> <N> <T> > |

  <EMS : <num> "em" > |
  <EXS : <num> "ex" > |
  <LENGTHPX : <num> "px" > | 
  <LENGTHCM : <num> "cm" > | 
  <LENGTHMM : <num> "mm" > | 
  <LENGTHPT : <num> "pt" > | 
  <LENGTHPC : <num> "pc" > |
  <ANGLEDEG : <num> "deg" > | 
  <ANGLERAD : <num> "rad" > |
  <ANGLEGRAD : <num> "grad" > |
  <TIMEMS : <num> "ms" > |
  <TIMES : <num> "s" > |
  <FREQHZ : <num> "hz" > |
  <FREQKHZ : <num> "khz" > | 

  <DIMENSION : <num> <ident> > |

  <PERCENTAGE : <num> "%" > |
  <NUMBER : <num> > |

  <URI : ("url(" <w> <string> <w> ")") | ("url("<w> <url> <w> ")") > |
  <FUNCTION : <ident> "(" >
}


/* Overwriting rules  */
SimpleNode start() :
{/*@bgen(jjtree) start */
  SimpleNode jjtn000 = new SimpleNode(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) start */
  try {
/*@egen*/
  stylesheet() <EOF>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return (SimpleNode) jjtree.rootNode().jjtGetChild(0); }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void stylesheet() :
{/*@bgen(jjtree) stylesheet */
  SimpleNode jjtn000 = new SimpleNode(JJTSTYLESHEET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) stylesheet */
  try {
/*@egen*/
  ( charset() )?
  (<BLANK> | <CDO> | <CDC>)* ( import_a() (<BLANK> | <CDO> | <CDC> )* )*
  ( ( ruleset() | media() | page() ) (<BLANK> | <CDO> | <CDC>)* )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
  /* Reseni bez Lookahead, bohuzel pomalejsi */
  /*( ( ruleset() | media() | page() ) [<CDO> (<BLANK> | <CDO> | <CDC>)* | <CDC> (<BLANK> | <CDO> | <CDC>)*] )*  */
}

void import_a() :
{/*@bgen(jjtree) import_a */
  SimpleNode jjtn000 = new SimpleNode(JJTIMPORT_A);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) import_a */
  try {
/*@egen*/ 
  <IMPORT_SYM> (<BLANK>)*
  [string() | uri()] (<BLANK>)* ( medium() (<COMMA> (<BLANK>)* medium())* )? ";" (<BLANK>)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void media() :
{/*@bgen(jjtree) media */
  SimpleNode jjtn000 = new SimpleNode(JJTMEDIA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) media */
  try {
/*@egen*/
  <MEDIA_SYM> (<BLANK>)* medium() ( <COMMA> (<BLANK>)* medium() )* <LBRACE> (<BLANK>)* (ruleset())* "}" (<BLANK>)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void medium() :
{/*@bgen(jjtree) medium */
  SimpleNode jjtn000 = new SimpleNode(JJTMEDIUM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) medium */
  try {
/*@egen*/
  ident() (<BLANK>)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void page() :
{/*@bgen(jjtree) page */
  SimpleNode jjtn000 = new SimpleNode(JJTPAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) page */
  try {
/*@egen*/
  <PAGE_SYM> (<BLANK>)* (pseudo_page())? (<BLANK>)*
    <LBRACE> (<BLANK>)* declaration() ( ";" (<BLANK>)* declaration() )* "}" (<BLANK>)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void pseudo_page() :
{/*@bgen(jjtree) pseudo_page */
  SimpleNode jjtn000 = new SimpleNode(JJTPSEUDO_PAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) pseudo_page */
  try {
/*@egen*/
  ":" ident()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void operator() :
{/*@bgen(jjtree) operator */
  SimpleNode jjtn000 = new SimpleNode(JJTOPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) operator */
  try {
/*@egen*/
  ( slash() (<BLANK>)* | comma() (<BLANK>)* )?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void combinator() :
{/*@bgen(jjtree) combinator */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMBINATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) combinator */
  try {
/*@egen*/
  plus() (<BLANK>)* | greater() (<BLANK>)* | <BLANK>/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void unary_operator() :
{/*@bgen(jjtree) unary_operator */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARY_OPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) unary_operator */
  try {
/*@egen*/
  minus() | plus()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void property() :
{/*@bgen(jjtree) property */
  SimpleNode jjtn000 = new SimpleNode(JJTPROPERTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) property */
  try {
/*@egen*/
  ident() (<BLANK>)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void ruleset() :
{/*@bgen(jjtree) ruleset */
  SimpleNode jjtn000 = new SimpleNode(JJTRULESET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ruleset */
  try {
/*@egen*/
  selector() ( <COMMA> (<BLANK>)* selector() )*
  <LBRACE> (<BLANK>)* declaration() ( ";" (<BLANK>)* declaration() )* "}" (<BLANK>)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void selector() :
{/*@bgen(jjtree) selector */
  SimpleNode jjtn000 = new SimpleNode(JJTSELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) selector */
  try {
/*@egen*/
  simple_selector() ( combinator() simple_selector() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void simple_selector() :
{/*@bgen(jjtree) simple_selector */
  SimpleNode jjtn000 = new SimpleNode(JJTSIMPLE_SELECTOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) simple_selector */
  try {
/*@egen*/
  element_name() ( hash() | class_a() | attrib() | pseudo() )*
  | ( hash() | class_a() | attrib() | pseudo() )+/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void class_a() :
{/*@bgen(jjtree) class_a */
  SimpleNode jjtn000 = new SimpleNode(JJTCLASS_A);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) class_a */
  try {
/*@egen*/
  "." ident()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void element_name() :
{/*@bgen(jjtree) element_name */
  SimpleNode jjtn000 = new SimpleNode(JJTELEMENT_NAME);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) element_name */
  try {
/*@egen*/
  ident() | "*"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void attrib() :
{/*@bgen(jjtree) attrib */
  SimpleNode jjtn000 = new SimpleNode(JJTATTRIB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) attrib */
  try {
/*@egen*/
  "[" (<BLANK>)* ident() (<BLANK>)* [ (equal() | includes() | dashmatch() ) (<BLANK>)*
    ( ident() | string() ) (<BLANK>)* ] "]"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void pseudo() :
{/*@bgen(jjtree) pseudo */
  SimpleNode jjtn000 = new SimpleNode(JJTPSEUDO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) pseudo */
  try {
/*@egen*/
  ":" ( ident() | pfunction() )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void pfunction() :
{/*@bgen(jjtree) pfunction */
  SimpleNode jjtn000 = new SimpleNode(JJTPFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) pfunction */
  try {
/*@egen*/
  function_begin() (<BLANK>)* [ident()] (<BLANK>)* ")"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void declaration() :
{/*@bgen(jjtree) declaration */
  SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) declaration */
  try {
/*@egen*/
  (property() ":" (<BLANK>)* expr() (prio())?)?/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void prio() :
{/*@bgen(jjtree) prio */
  SimpleNode jjtn000 = new SimpleNode(JJTPRIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) prio */
  try {
/*@egen*/
  <IMPORTANT_SYM> (<BLANK>)*/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void expr() :
{/*@bgen(jjtree) expr */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) expr */
  try {
/*@egen*/
  term() ( operator() term() )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void term() :
{/*@bgen(jjtree) term */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) term */
  try {
/*@egen*/
  [ unary_operator() ]
    ( number() (<BLANK>)* | percentage() (<BLANK>)* | lengthpx() (<BLANK>)* | lengthcm() (<BLANK>)* | lengthmm() (<BLANK>)* | 
      lengthpt() (<BLANK>)* | lengthpc() (<BLANK>)* | ems() (<BLANK>)* | exs() (<BLANK>)* | angledeg() (<BLANK>)* | anglerad() (<BLANK>)* | anglegrad() (<BLANK>)* |
      timems() (<BLANK>)* | times() (<BLANK>)* | freqhz() (<BLANK>)* | freqkhz() (<BLANK>)* )
    | string() (<BLANK>)* | ident() (<BLANK>)* | uri() (<BLANK>)* | hexcolor() | function()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void function() :
{/*@bgen(jjtree) function */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) function */
  try {
/*@egen*/
  function_begin() (<BLANK>)* expr() ")" (<BLANK>)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void hexcolor() :
{/*@bgen(jjtree) hexcolor */
  SimpleNode jjtn000 = new SimpleNode(JJTHEXCOLOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) hexcolor */
  try {
/*@egen*/
  hash() (<BLANK>)*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void charset() :
{/*@bgen(jjtree) charset */
  SimpleNode jjtn000 = new SimpleNode(JJTCHARSET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) charset */
  try {
/*@egen*/
  <CHARSET_SYM> string() ";"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void equal() :      
{/*@bgen(jjtree) equal */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) equal */
    try {
/*@egen*/ 
    <EQUAL>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void includes() :   
{/*@bgen(jjtree) includes */
  SimpleNode jjtn000 = new SimpleNode(JJTINCLUDES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) includes */
    try {
/*@egen*/
    <INCLUDES>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void dashmatch() :  
{/*@bgen(jjtree) dashmatch */
  SimpleNode jjtn000 = new SimpleNode(JJTDASHMATCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) dashmatch */
    try {
/*@egen*/
    <DASHMATCH>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void comma() :  
{/*@bgen(jjtree) comma */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} 
{/*@bgen(jjtree) comma */
    try {
/*@egen*/
    <COMMA>/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

void slash() :
{/*@bgen(jjtree) slash */
  SimpleNode jjtn000 = new SimpleNode(JJTSLASH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) slash */
    try {
/*@egen*/
    "/"/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

/* Tokens with specified tokens */
void hash() :       {/*@bgen(jjtree) hash */
                      SimpleNode jjtn000 = new SimpleNode(JJTHASH);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) hash */
                                   try {
/*@egen*/ t=<HASH>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/        { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void ident() :      {/*@bgen(jjtree) ident */
                      SimpleNode jjtn000 = new SimpleNode(JJTIDENT);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) ident */
                                   try {
/*@egen*/ t=<IDENT>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/       { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void string() :     {/*@bgen(jjtree) string */
                      SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) string */
                                   try {
/*@egen*/ t=<STRING>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/      { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void uri() :        {/*@bgen(jjtree) uri */
                      SimpleNode jjtn000 = new SimpleNode(JJTURI);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) uri */
                                   try {
/*@egen*/ t=<URI>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/         { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void number() :     {/*@bgen(jjtree) number */
                      SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) number */
                                   try {
/*@egen*/ t=<NUMBER>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/      { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void percentage() : {/*@bgen(jjtree) percentage */
                      SimpleNode jjtn000 = new SimpleNode(JJTPERCENTAGE);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) percentage */
                                   try {
/*@egen*/ t=<PERCENTAGE>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/  { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void lengthpx() :   {/*@bgen(jjtree) lengthpx */
                      SimpleNode jjtn000 = new SimpleNode(JJTLENGTHPX);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) lengthpx */
                                   try {
/*@egen*/ t=<LENGTHPX>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/    { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void lengthcm() :   {/*@bgen(jjtree) lengthcm */
                      SimpleNode jjtn000 = new SimpleNode(JJTLENGTHCM);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) lengthcm */
                                   try {
/*@egen*/ t=<LENGTHCM>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/    { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void lengthmm() :   {/*@bgen(jjtree) lengthmm */
                      SimpleNode jjtn000 = new SimpleNode(JJTLENGTHMM);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) lengthmm */
                                   try {
/*@egen*/ t=<LENGTHMM>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/    { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void lengthpt() :   {/*@bgen(jjtree) lengthpt */
                      SimpleNode jjtn000 = new SimpleNode(JJTLENGTHPT);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) lengthpt */
                                   try {
/*@egen*/ t=<LENGTHPT>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/    { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void lengthpc() :   {/*@bgen(jjtree) lengthpc */
                      SimpleNode jjtn000 = new SimpleNode(JJTLENGTHPC);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) lengthpc */
                                   try {
/*@egen*/ t=<LENGTHPC>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/    { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void ems() :        {/*@bgen(jjtree) ems */
                      SimpleNode jjtn000 = new SimpleNode(JJTEMS);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) ems */
                                   try {
/*@egen*/ t=<EMS>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/         { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void exs() :        {/*@bgen(jjtree) exs */
                      SimpleNode jjtn000 = new SimpleNode(JJTEXS);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) exs */
                                   try {
/*@egen*/ t=<EXS>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/         { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void angledeg() :   {/*@bgen(jjtree) angledeg */
                      SimpleNode jjtn000 = new SimpleNode(JJTANGLEDEG);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) angledeg */
                                   try {
/*@egen*/ t=<ANGLEDEG>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/    { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void anglerad() :   {/*@bgen(jjtree) anglerad */
                      SimpleNode jjtn000 = new SimpleNode(JJTANGLERAD);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) anglerad */
                                   try {
/*@egen*/ t=<ANGLERAD>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/    { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void anglegrad() :  {/*@bgen(jjtree) anglegrad */
                      SimpleNode jjtn000 = new SimpleNode(JJTANGLEGRAD);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) anglegrad */
                                   try {
/*@egen*/ t=<ANGLEGRAD>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/   { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void timems() :     {/*@bgen(jjtree) timems */
                      SimpleNode jjtn000 = new SimpleNode(JJTTIMEMS);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) timems */
                                   try {
/*@egen*/ t=<TIMEMS>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/      { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void times() :      {/*@bgen(jjtree) times */
                      SimpleNode jjtn000 = new SimpleNode(JJTTIMES);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) times */
                                   try {
/*@egen*/ t=<TIMES>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/       { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void freqhz() :     {/*@bgen(jjtree) freqhz */
                      SimpleNode jjtn000 = new SimpleNode(JJTFREQHZ);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) freqhz */
                                   try {
/*@egen*/ t=<FREQHZ>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/      { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void freqkhz() :    {/*@bgen(jjtree) freqkhz */
                      SimpleNode jjtn000 = new SimpleNode(JJTFREQKHZ);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) freqkhz */
                                   try {
/*@egen*/ t=<FREQKHZ>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/     { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void plus() :       {/*@bgen(jjtree) plus */
                      SimpleNode jjtn000 = new SimpleNode(JJTPLUS);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) plus */
                                   try {
/*@egen*/ t=<PLUS>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/        { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void minus() :      {/*@bgen(jjtree) minus */
                      SimpleNode jjtn000 = new SimpleNode(JJTMINUS);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) minus */
                                   try {
/*@egen*/ t=<MINUS>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/       { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void greater():     {/*@bgen(jjtree) greater */
                      SimpleNode jjtn000 = new SimpleNode(JJTGREATER);
                      boolean jjtc000 = true;
                      jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) greater */
                                   try {
/*@egen*/ t=<GREATER>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                   }
/*@egen*/     { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                   } finally {
                                     if (jjtc000) {
                                       jjtree.closeNodeScope(jjtn000, true);
                                     }
                                   }
/*@egen*/ }
void function_begin() :  {/*@bgen(jjtree) function_begin */
                           SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION_BEGIN);
                           boolean jjtc000 = true;
                           jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) function_begin */
                                        try {
/*@egen*/ t=<FUNCTION>/*@bgen(jjtree)*/
                                                           {
                                                             jjtree.closeNodeScope(jjtn000, true);
                                                             jjtc000 = false;
                                                           }
/*@egen*/       { jjtn000.setImage(t.image); }/*@bgen(jjtree)*/
                                        } finally {
                                          if (jjtc000) {
                                            jjtree.closeNodeScope(jjtn000, true);
                                          }
                                        }
/*@egen*/ }

