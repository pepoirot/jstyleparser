/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. ./CSSParser.jj */
/*@egen*//* Options for generated parser */
options {
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = true;
  IGNORE_CASE = true;
  STATIC = false;
}


/* API definition */
PARSER_BEGIN(CSSParser)

package cz.vutbr.web.csskit.parser;

import org.apache.log4j.Logger;

import java.io.StringReader;
import java.util.List;
import java.util.ArrayList;
import java.util.Arrays;

import cz.vutbr.web.css.Rule;
import cz.vutbr.web.css.ImportURI;
import cz.vutbr.web.css.StyleSheet;
import cz.vutbr.web.css.RuleMedia;
import cz.vutbr.web.css.RuleSet;
import cz.vutbr.web.css.RulePage;
import cz.vutbr.web.css.Declaration;
import cz.vutbr.web.css.Selector;
import cz.vutbr.web.css.SimpleSelector;
import cz.vutbr.web.css.Term;
import cz.vutbr.web.css.TermIdent;
import cz.vutbr.web.css.TermFunction;
import cz.vutbr.web.css.TermNumber;
import cz.vutbr.web.css.StyleSheetNotValidException;
import cz.vutbr.web.csskit.StyleSheetImpl;
import cz.vutbr.web.csskit.RuleSetImpl;
import cz.vutbr.web.csskit.RuleMediaImpl;
import cz.vutbr.web.csskit.RulePageImpl;
import cz.vutbr.web.csskit.DeclarationImpl;
import cz.vutbr.web.csskit.SelectorImpl;
import cz.vutbr.web.csskit.SimpleSelectorImpl;
import cz.vutbr.web.csskit.ImportURIImpl;
import cz.vutbr.web.csskit.TermStringImpl;
import cz.vutbr.web.csskit.TermIdentImpl;
import cz.vutbr.web.csskit.TermUriImpl;
import cz.vutbr.web.csskit.TermNumberImpl;
import cz.vutbr.web.csskit.TermPercentImpl;
import cz.vutbr.web.csskit.TermColorImpl;
import cz.vutbr.web.csskit.TermFunctionImpl;

/**
 * Parser of CSS passed as InputStream, Reader or directly as String.
 * Successful parsing creates StyleSheet  	
 */
//@SuppressWarnings("all")
public class CSSParser/*@bgen(jjtree)*/implements CSSParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTCSSParserState jjtree = new JJTCSSParserState();

/*@egen*/
	
	private static Logger log = Logger.getLogger(CSSParser.class);


	/** Charset of given css */
	private String charset;
	
	/** Rules gathered from input */
	private List<Rule> rules = new ArrayList<Rule>();
	
	/** Files to be imported into stylesheet */
	private List<ImportURI> imports = new ArrayList<ImportURI>();

	private int rulesetNum;

	/** 
	 * Creates CSSParser.
	 * Uses string as input
	 * @param css Input string to be parsed
	 */ 
	public CSSParser(String css) {
		this(new StringReader(css));
	}
	
	/**
	 * Returns StyleSheet from input set by constructor.
	 *   
	 * @return StyleSheet according to the input
	 * @throws StyleSheetNotValidException in case of error
	 */
	public StyleSheet parse() throws StyleSheetNotValidException {
		try {
			this.rulesetNum = 0;
			return this.start();
		}
		catch (ParseException e) {
			log.error("Parse exception at top level, this should not happen!\n"
				+ e);
			throw new StyleSheetNotValidException("Not a valid stylesheet!"); 
		}
	}
		
	/**
	 * Error recovery.
	 * Skip to given token in case of error.
	 * End of File (EOF) token is added automatically.
	 * @param message message to be logged
	 * @param kinds Type(s) of token where to continue  
	 */
	private void errorSkipTo(final String message, final int...kinds) {
	
		if(log.isInfoEnabled()) {
			log.info(message);
		}
		
		if(log.isDebugEnabled()) {
			ParseException e = generateParseException();	
			log.debug(e);
		}
	
	    // use auto boxing and unboxing, not very pretty 
		// construct stop tokens
		// array list should be faster for this situation
		List<Integer>  stopTokens = new ArrayList<Integer>(kinds.length + 1);
		for(int i = 0; i < kinds.length; i++)
			stopTokens.add(new Integer(kinds[i]));
			
		stopTokens.add(EOF); 
	
		if(log.isTraceEnabled()) {
			log.trace("Stopped on token: " +
					CSSParserConstants.tokenImage[getToken(0).kind] +
					" with value: " + getToken(0).image); 
		}
		
		Token t = getToken(0);
		while(!stopTokens.contains(t.kind)) {
			t = getNextToken();
			if(log.isTraceEnabled())
				log.trace("Skipping to token:" + CSSParserConstants.tokenImage[t.kind] + ", " + t.image );
		}
		
	}

}
PARSER_END(CSSParser)

// Skip comments
SKIP :
{
  <SLASH_STAR_COMMENT: "/*" (~["*"])* ("*")+ (~["/","*"] (~["*"])* ("*")+)* "/" >
}

// Tokens of lexical analyzer 
TOKEN : 
{
  <#h : ["0"-"9", "a"-"f"]> |
  <#nonascii : ["\200"-"\377"]> |
  <#unicode : "\\" <h> (<h>)? (<h>)? (<h>)? (<h>)? (<h>)? ("\r\n"|[" ", "\t", "\r", "\n", "\f"])? > |
  <#escape : <unicode> | "\\" ~["\r", "\n", "\f", "0"-"9", "a"-"f"]> |
  <#nmstart : ["_", "a"-"z"] | <nonascii> | <escape>> |
  <#nmchar : ["_", "a"-"z", "0"-"9", "-"] | <nonascii> | <escape>> |
  <#string1 : "\"" (~["\n", "\r", "\f", "\""] | "\\" <NL> | <escape>)* "\""> |
  <#string2 : "'" (~["\n", "\r", "\f", "'"] | "\\" <NL> | <escape>)* "'"> |
  <#invalid1 : "\""(~["\n", "\r", "\f", "\""] | "\\" <NL> | <escape>)* > |
  <#invalid2	: "'"(~["\n", "\r", "\f", "'"] | "\\" <NL> | <escape>)* > |

  <#comment : "/*" (~["*"])* ("*")+ (~["/","*"] (~["*"])* ("*")+)* "/" > |
  <#ident : ("-")? <nmstart> (<nmchar>)* > |
  <#name : (<nmchar>)+ > |
  <#num : (["0"-"9"])+ | (["0"-"9"])* "." (["0"-"9"])+ > |
  <#string : <string1>|<string2> > |
  <#invalid : <invalid1>|<invalid2> > |
  <#url : ([";", "!", "#", "$", "%", "&", "*", "-", "~", ".", "/", ":", ",", "=", "?"] | <nmchar> )* > | 
  
  <#SPACE : ([" ", "\t", "\r", "\n", "\f"])+ > |
  <#WHITECHAR : (<SPACE>)? > |  
  
  <#NL : "\n" | "\r\n" | "\r" | "\f"> |

  <BLANK : <SPACE> > |

  <CDO : "<!--" > |
  <CDC : "-->" > |
  <EQUAL : "=" > |
  <INCLUDES : "~=" > |
  <DASHMATCH : "|=" > |

  <LCURLY : <WHITECHAR> "{" > |
  <RCURLY : <WHITECHAR> "}" > |
  <RPAREN : ")" > |
  <LBRACE : "[" > |
  <RBRACE : "]" > |
  <SEMICOLON: ";" > |
  <PLUS : <WHITECHAR> "+" > |
  <MINUS : <WHITECHAR> "-" > |
  <GREATER : <WHITECHAR> ">" > |
  <COMMA : <WHITECHAR> "," > |
  <STRING : <string> > |
  <INVALID : <invalid> > |
  <IDENT : <ident> > |

  <HASH : "#" <name> > |

  <IMPORT_SYM : "@import" > |
  <PAGE_SYM : "@page" > |
  <MEDIA_SYM : "@media" > |
  <CHARSET_SYM : "@charset " > |

  <IMPORTANT_SYM : "!" (<WHITECHAR>|<comment>)* "important" > |

  <EMS : <num> "em" > |
  <EXS : <num> "ex" > |
  <LENGTHPX : <num> "px" > | 
  <LENGTHCM : <num> "cm" > | 
  <LENGTHMM : <num> "mm" > | 
  <LENGTHPT : <num> "pt" > | 
  <LENGTHPC : <num> "pc" > |
  <ANGLEDEG : <num> "deg" > | 
  <ANGLERAD : <num> "rad" > |
  <ANGLEGRAD : <num> "grad" > |
  <TIMEMS : <num> "ms" > |
  <TIMES : <num> "s" > |
  <FREQHZ : <num> "hz" > |
  <FREQKHZ : <num> "khz" > | 

  <DIMENSION : <num> <ident> > |

  <PERCENTAGE : <num> "%" > |
  <NUMBER : <num> > |

  <URI : ("url(" <WHITECHAR> <string> <WHITECHAR> <RPAREN>) | ("url("<WHITECHAR> <url> <WHITECHAR> <RPAREN> ) > |
  <FUNCTION : <ident> "(" >
}


/**
 * Parses input and returns gathered information as StyleSheet.
 * @return StyleSheet which contains rules gathered.
 * @see StyleSheet
 */
StyleSheet start() :
{/*@bgen(jjtree) start */
        SimpleNode jjtn000 = new SimpleNode(JJTSTART);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	StyleSheet stylesheet = new StyleSheetImpl();
}
{/*@bgen(jjtree) start */
        try {
/*@egen*/
	stylesheet() <EOF>/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/
  	{ 
  		stylesheet.setCharset(charset);
  		stylesheet.setImports(imports);
  		stylesheet.setRules(rules);
  
  		return stylesheet; 
  	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void stylesheet() :
{/*@bgen(jjtree) stylesheet */
  SimpleNode jjtn000 = new SimpleNode(JJTSTYLESHEET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) stylesheet */
        try {
/*@egen*/
	try {
  		( charset() )?
  		(<BLANK> | <CDO> | <CDC>)* 
  		( import_a() (<BLANK> | <CDO> | <CDC> )* )*
  		( 
  			( 	ruleset(this.rules) | 
  				media() | 
  				page() 
  			) 
  			(<BLANK> | <CDO> | <CDC>)* 
  		)*
  	}
  	catch (ParseException e) {
  		throw e;
  	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Internally sets charset of document. 
 */
void charset() :
{/*@bgen(jjtree) charset */
 SimpleNode jjtn000 = new SimpleNode(JJTCHARSET);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
/*@egen*/String currentCharset = null;}
{/*@bgen(jjtree) charset */
        try {
/*@egen*/
	try {
  		<CHARSET_SYM> currentCharset = string() <SEMICOLON>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
  		{
  			charset = currentCharset;
  		}
  	}
  	catch (ParseException e) {
  		// according to CSS UA
  		// ignore until next block is found
  		errorSkipTo("Failed to retrive charset", RCURLY);
  	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


/**
 * Creates and add new import rule to stylesheet 
 */
void import_a() :
{/*@bgen(jjtree) import_a */
        SimpleNode jjtn000 = new SimpleNode(JJTIMPORT_A);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String currentUri = null;
	ImportURI uri = new ImportURIImpl();
	List<String> medias = new ArrayList<String>();
}
{/*@bgen(jjtree) import_a */
        try {
/*@egen*/ 
	try {
  		<IMPORT_SYM> (<BLANK>)*
  		[currentUri=string_or_uri() (<BLANK>)*]	
  		( 
  			medium(medias) 
  			(
  				<COMMA> 
  				(
  					<BLANK>)* 
  					medium(medias)
  				)* 
  			)? 
  			<SEMICOLON>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ 
  		{	
  			if(currentUri!=null || !"".equals(currentUri))
  				uri.setUri(currentUri);
  			uri.setMedias(medias);
  			this.imports.add(uri);	
  		}
  	}
  	catch (ParseException e) {
  		errorSkipTo("Failed parsing importing rule import_a()", BLANK);
  	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Creates and sets new media rule to stylesheet
 */
//@SuppressWarnings("unchecked") 
void media() :
{/*@bgen(jjtree) media */
        SimpleNode jjtn000 = new SimpleNode(JJTMEDIA);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	RuleMedia media = new RuleMediaImpl();
	List<String> medias = new ArrayList<String>();
	List<? extends Rule> rules = new ArrayList<RuleSet>();
}
{/*@bgen(jjtree) media */
        try {
/*@egen*/
	try {
  		<MEDIA_SYM> 
  		(<BLANK>)* 
  		medium(medias) 
  		( 
  			<COMMA> 
  			(<BLANK>)* 
  			medium(medias) 
  		)* 
  		<LCURLY> 
  		(<BLANK>)* 
  		(ruleset( (List<Rule>) rules))* 
  		<RCURLY>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ 
  		{
  			media.setMedias(medias);
  			media.setRules( (List<RuleSet>) rules);
  			this.rules.add(media);
  		}
  	}
  	catch (ParseException e) {
  		errorSkipTo("Failed parsing media rule media()", RCURLY);
  	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Adds media to list.
 * @param medias Current list of associated medias
 */
void medium(List<String> medias) :
{/*@bgen(jjtree) medium */
        SimpleNode jjtn000 = new SimpleNode(JJTMEDIUM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String currentMedia = null;
}
{/*@bgen(jjtree) medium */
        try {
/*@egen*/
	try {
  		currentMedia = ident() (<BLANK>)*/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/
  		{
  			medias.add(currentMedia);
  		}
  	}
  	catch (ParseException e) {
  		errorSkipTo("Failed to retrieve medium()", BLANK);
  	}
  	// trying to add the same element more times
  	catch (IllegalArgumentException e) {
		log.warn("Multiple definition of media :" + currentMedia); 
  	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Inserts ruleset's rule into rule set
 * @param rules List of rules where new ruleset will be added
 */
void ruleset(List<Rule> rules) :
{/*@bgen(jjtree) ruleset */
        SimpleNode jjtn000 = new SimpleNode(JJTRULESET);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	RuleSetImpl rule = new RuleSetImpl();
	List<Selector> selectors = new ArrayList<Selector>();
	List<Declaration> declarations = new ArrayList<Declaration>();
	
	Selector sel = null;
	Declaration dec = null;
}
{/*@bgen(jjtree) ruleset */
        try {
/*@egen*/
	try {
  		sel = selector() 
  		{
  			if(sel!=null) selectors.add(sel);
  		}
  		( <COMMA> (<BLANK>)* sel = selector()
  			{
  				if(sel!=null) selectors.add(sel);
  			} 
  		)*
  		<LCURLY> 
  		(<BLANK>)* dec = declaration()
  			{
  				// store declaration
  				if(dec != null) declarations.add(dec);
  			} 
  			( <SEMICOLON> (<BLANK>)* dec = declaration()
  				{
  					// store another declaration
  					if(dec != null) declarations.add(dec);
  				} 
  			)* 
  		<RCURLY>
  	}
  	catch (ParseException e) {
  		errorSkipTo("Failed to retrieve ruleset()", RCURLY);
  	}
  	// be error graceful to unknown selectors and declarations
  	finally {
  		if(selectors.size() > 0 && declarations.size() > 0) {
  			rule.setSelectors(selectors);
  			rule.setDeclarations(declarations);
  			rule.setOrder(++rulesetNum);
  			rules.add(rule);
  		}
  	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Inserts page rule as stylesheet rule 
 */
void page() :
{/*@bgen(jjtree) page */
        SimpleNode jjtn000 = new SimpleNode(JJTPAGE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	RulePage page = new RulePageImpl();
	List<Declaration> declarations = new ArrayList<Declaration>();
	Declaration dec = null;
	String pseudo = null;
}
{/*@bgen(jjtree) page */
        try {
/*@egen*/
	try {
  		<PAGE_SYM> (<BLANK>)* [ pseudo = pseudo_page() (<BLANK>)*]
    	<LCURLY> 
    	(<BLANK>)* dec = declaration()
    		{
    			// add declaration
    			if(dec != null) declarations.add(dec);
    		} 
    		( <SEMICOLON> (<BLANK>)* dec = declaration()
    			{
    				// add declaration
    				if(dec != null) declarations.add(dec);
    			} 
    		)* 
    	<RCURLY> 
    }
    catch (ParseException e) {
		errorSkipTo("Failed to retrieve page()", RCURLY);    
    }
    // be error graceful to unknown declarations
  	finally {
  		if(declarations.size() > 0) {
  			page.setPseudo(pseudo);
    		page.setDeclarations(declarations);
    		this.rules.add(page);
  		}
  	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Retrieve pseudo for page
 * @return Pseudo of current page
 */
String pseudo_page() :
{/*@bgen(jjtree) pseudo_page */
        SimpleNode jjtn000 = new SimpleNode(JJTPSEUDO_PAGE);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String pseudo = null;
}
{/*@bgen(jjtree) pseudo_page */
  try {
/*@egen*/
  ":" pseudo = ident()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/ 
  { 
  	return pseudo;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/**
 * Returns new declaration
 * @return declaration
 */
Declaration declaration() :
{/*@bgen(jjtree) declaration */
        SimpleNode jjtn000 = new SimpleNode(JJTDECLARATION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Declaration declaration = new DeclarationImpl();
	List<Term> terms = null;
	String property = null;
	boolean important = false;
}
{/*@bgen(jjtree) declaration */
        try {
/*@egen*/
	try {
  		( property = property() ":" (<BLANK>)* terms = expr() ( important = prio())? )?
  	}
  	catch (ParseException e) {
  		errorSkipTo("Failed to read declaration", NL, SEMICOLON, RCURLY);
  	}
  	finally {
  		if(terms==null && property==null)
  		 	return null;
  	
  		declaration.setImportant(important);
		declaration.setProperty(property);
		declaration.setTerms(terms);
  			
		if(log.isDebugEnabled()) {
			log.debug("Having declaration of property: " + property +
  				", and " + declaration.getTerms().size() + " terms " + terms);
  		}
  		return declaration;
  	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}


/**
 * Returns name of property
 * @return Name of property
 */
String property() :
{/*@bgen(jjtree) property */
        SimpleNode jjtn000 = new SimpleNode(JJTPROPERTY);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String currentProperty = null;
}
{/*@bgen(jjtree) property */
        try {
/*@egen*/
  	currentProperty = ident() (<BLANK>)*/*@bgen(jjtree)*/
                                             {
                                               jjtree.closeNodeScope(jjtn000, true);
                                               jjtc000 = false;
                                             }
/*@egen*/ { return currentProperty;}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Returns selector for given rules
 * @return Selector 
 */
Selector selector() :
{/*@bgen(jjtree) selector */
        SimpleNode jjtn000 = new SimpleNode(JJTSELECTOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Selector s = new SelectorImpl();
	List<SimpleSelector> ss = new ArrayList<SimpleSelector>();
	SimpleSelector selector = null;
	SimpleSelector.Combinator c = null;
}
{/*@bgen(jjtree) selector */
        try {
/*@egen*/
	try {
  		selector=simple_selector()
  			{
  				if(selector!=null) ss.add(selector); 
  			} 
  		( 
  			c = combinator() {
  				if(log.isTraceEnabled()) {
  					log.trace("Combinator: " + c);
  				}
  			}
  			selector = simple_selector()
  				{
  					if(selector!=null) {
  						selector.setCombinator(c);
  						ss.add(selector);
  					}
  				} 
  		)*
  	}
  	catch(ParseException e) {
  		errorSkipTo("Unable to get selector", BLANK, LCURLY);
  	}
  	finally {
  		if(log.isDebugEnabled()) {
  			log.debug("Having selectors(" + ss.size() + "): " + ss);
  		}
  		s.setSimpleSelectors(ss);
  		return s;
  	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Returns simple selector
 * @return Simple selector as a part of Selector
 */
SimpleSelector simple_selector() :
{/*@bgen(jjtree) simple_selector */
        SimpleNode jjtn000 = new SimpleNode(JJTSIMPLE_SELECTOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	SimpleSelector s = new SimpleSelectorImpl();
	String value = null;
	SimpleSelector.Item item = null;
	List<SimpleSelector.Item> items = new ArrayList<SimpleSelector.Item>();
}
{/*@bgen(jjtree) simple_selector */
        try {
/*@egen*/
	try {
  		value = element_name()
  			{
  				if(log.isTraceEnabled()) log.trace("elementName: " + value);
  				s.setFirstItem(new SimpleSelectorImpl.ItemImpl(value));
  				
  			} 
  		( 
  			value = hash() 
  				{
  					if(log.isTraceEnabled()) log.trace("ID: " + value);
  					item = new SimpleSelectorImpl.ItemIDImpl(value);
  					if(item != null) items.add(item);
  			 	} |
  			item = class_a() 
  				{
  					if(log.isTraceEnabled()) log.trace(".class: " + item);
  					if(item!=null) items.add(item);
  				} |	 
  			item = attrib() 
  				{
  					if(log.isTraceEnabled()) log.trace("[attrib]: " + item);
  					if(item!=null) items.add(item);
  				} | 
  			item = pseudo()  
  				{
  					if(log.isTraceEnabled()) log.trace(":pseudo: " + item);
  					if(item!=null) items.add(item);
  				}
  		)*| 
  		( 
  			value = hash()
  			 	{
  			 		if(log.isTraceEnabled()) log.trace("ID: " + value);
  					item = new SimpleSelectorImpl.ItemIDImpl(value);
  					if(item != null) items.add(item);
  			 	} |
  			item = class_a() 
  				{
  					if(log.isTraceEnabled()) log.trace(".class: " + item);
  					if(item!=null) items.add(item);
  				} |	 
  			item = attrib() 
  				{
  					if(log.isTraceEnabled()) log.trace("[attrib]: " + item);
  					if(item!=null) items.add(item);
  				} |	
  			item = pseudo() 
  				{
  					if(log.isTraceEnabled()) log.trace(":pseudo: " + item);
  					if(item!=null) items.add(item);
  				}
  		)+
  	}
  	catch(ParseException e) {
  		errorSkipTo("Unable to get simple selector", BLANK, LCURLY);
  	}
  	finally {
  	
  		s.setItems(items);
  	
  		if(log.isTraceEnabled()) {
  			log.trace("SimpleSelector: " + s);
  		}
  		
  		return s;
  	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Returns .class simple selector
 */
SimpleSelector.Item class_a() :
{/*@bgen(jjtree) class_a */
        SimpleNode jjtn000 = new SimpleNode(JJTCLASS_A);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String value = null;
}
{/*@bgen(jjtree) class_a */
  try {
/*@egen*/
  "." value = ident()/*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn000, true);
          jjtc000 = false;
        }
/*@egen*/ 
  	{ 
  		return new SimpleSelectorImpl.ItemClassImpl(value);
  	}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/**
 * Returns name of element for selector.
 * @return Name of element or asterisk
 */
String element_name() :
{/*@bgen(jjtree) element_name */
        SimpleNode jjtn000 = new SimpleNode(JJTELEMENT_NAME);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String element = null;
}
{/*@bgen(jjtree) element_name */
        try {
/*@egen*/
  	element=ident()/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ { return element;} | "*"/*@bgen(jjtree)*/
                                                 {
                                                   jjtree.closeNodeScope(jjtn000, true);
                                                   jjtc000 = false;
                                                 }
/*@egen*/ {return "*";}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Returns [attribute] simple selector
 */
SimpleSelector.Item attrib() :
{/*@bgen(jjtree) attrib */
        SimpleNode jjtn000 = new SimpleNode(JJTATTRIB);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String attribute = null;
	String value = null;
	boolean isStringValue = false;	// default value is identificator, so false
	SimpleSelector.Operator op = SimpleSelector.Operator.NO_OPERATOR;
}
{/*@bgen(jjtree) attrib */
        try {
/*@egen*/
	try {
  		<LBRACE> 
  		(
  			<BLANK>)* attribute = ident() (<BLANK>
  		)* 
  		[ 
  			(op = equal() | op = includes() | op = dashmatch() ) (<BLANK>)*
    		( 	
    			value = ident()	{ isStringValue = false; } | 
    			value = string() { isStringValue = true; }
    		) (<BLANK>)* 
    	] 
    	<RBRACE>
    }
    catch (ParseException ex) {
    	errorSkipTo("Unable to get selectors attribute", NL, COMMA, LBRACE, RBRACE);
    	return null;
    }
    finally {
    	// attribute is only required value
    	if(attribute!=null)
    		return new SimpleSelectorImpl.ItemAttributeImpl(value, isStringValue, op, attribute);
    	
    	return null;
    }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Returns :pseudo simple selector
 */
SimpleSelector.Item pseudo() :
{/*@bgen(jjtree) pseudo */
        SimpleNode jjtn000 = new SimpleNode(JJTPSEUDO);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String pseudo = null;
	SimpleSelector.Item function = null;
}
{/*@bgen(jjtree) pseudo */
        try {
/*@egen*/
	try {
  		":" 
  		( 
  			pseudo = ident() | 
  			function = pfunction() 
  		)
  	}
  	catch (ParseException e) {
  		errorSkipTo("Unable to get :pseudo in simpleselector", BLANK, LBRACE, COMMA); 
  	}
  	finally {
  		// matched first branch
  		if(pseudo!=null) 
  			return new SimpleSelectorImpl.ItemPseudoImpl(pseudo, null);
  		
  		return function;
  	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Returns :pseudo-function() simple selector 
 */
SimpleSelector.Item pfunction() :
{/*@bgen(jjtree) pfunction */
        SimpleNode jjtn000 = new SimpleNode(JJTPFUNCTION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String functionName = null;
	String value = null;
}
{/*@bgen(jjtree) pfunction */
        try {
/*@egen*/
	try {
  		functionName = function_begin() 
  		(<BLANK>)* 
  		[ value = ident() (<BLANK>)* ] 
  		<RPAREN>
  	}
  	catch (ParseException ex) {
  		errorSkipTo("Unable to get :pseudo()", RPAREN, NL, COMMA, LBRACE);
  		functionName = null;
  	}
  	finally {
  		if(functionName!=null) {
  			return new SimpleSelectorImpl.ItemPseudoImpl(value, functionName);
  		}
  		return null;
  	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Returns operator between terms
 */
Term.Operator operator() :
{/*@bgen(jjtree) operator */
        SimpleNode jjtn000 = new SimpleNode(JJTOPERATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	Term.Operator op = Term.Operator.SPACE;
}
{/*@bgen(jjtree) operator */
        try {
/*@egen*/
	try {
  		( 
  			op = slash() (<BLANK>)* { return op;} | 
  			op = comma() (<BLANK>)* { return op;} 
  		)?
  		{ return op;}
  	}
  	catch (ParseException e) {
  		errorSkipTo("Failed to get operator", RCURLY, SEMICOLON, BLANK);
  		return Term.Operator.SPACE;
  	}/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
  	return op;
  }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Returns combinator between selectors
 */
SimpleSelector.Combinator combinator() :
{/*@bgen(jjtree) combinator */
        SimpleNode jjtn000 = new SimpleNode(JJTCOMBINATOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	SimpleSelector.Combinator c = SimpleSelector.Combinator.DESCENDANT;
}
{/*@bgen(jjtree) combinator */
        try {
/*@egen*/
	try {
  		c=plus() (<BLANK>)*/*@bgen(jjtree)*/
                                    {
                                      jjtree.closeNodeScope(jjtn000, true);
                                      jjtc000 = false;
                                    }
/*@egen*/ { return c;} | 
  		c=greater() (<BLANK>)*/*@bgen(jjtree)*/
                                       {
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                       }
/*@egen*/ {return c;} | 
  		<BLANK>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ {return c;}
  	}
  	catch (ParseException e) {
  		errorSkipTo("Failed to get combinator", LCURLY, BLANK, COMMA);
  		return SimpleSelector.Combinator.DESCENDANT;
  	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * If unary operator is found, returns value
 * which is used to multiply current numeric value
 * @return <code>-1</code> for <code>minus</code>
 * and <code>1</code> for <code>plus</code>
 */
int unary_operator() :
{/*@bgen(jjtree) unary_operator */
  SimpleNode jjtn000 = new SimpleNode(JJTUNARY_OPERATOR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) unary_operator */
        try {
/*@egen*/
  	minus()/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/ { return -1; } | plus()/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/ { return 1; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Return true if priority !important found
 * @return <code>true</code> if node found
 */
boolean prio() :
{/*@bgen(jjtree) prio */
  SimpleNode jjtn000 = new SimpleNode(JJTPRIO);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) prio */
  try {
/*@egen*/
  <IMPORTANT_SYM> (<BLANK>)*/*@bgen(jjtree)*/
                             {
                               jjtree.closeNodeScope(jjtn000, true);
                               jjtc000 = false;
                             }
/*@egen*/ { return true;}/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

/**
 * Returns list of terms
 * @return List of terms
 */
List<Term> expr() :
{/*@bgen(jjtree) expr */
        SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	List<Term> terms = new ArrayList<Term>();
	Term.Operator op = null;
	Term term = null;
}
{/*@bgen(jjtree) expr */
        try {
/*@egen*/
	try {
  		term = term() 
  		{
  			if(term!=null) {
  				term.setOperator(op);
  				terms.add(term);
  			}	
  		}
  		( op = operator() term = term() 
  			{
  				if(term!=null) {
					term.setOperator(op);
					terms.add(term);
				}  				
  			}
  		)*
  	}
  	// even in case of error return currently parsed terms
  	catch (ParseException e) {
  		errorSkipTo("Failed to retrieve term", SEMICOLON, NL);
  	}
  	finally {
  		// return all parsed terms
  		if(log.isTraceEnabled()) {
  			log.trace("Total terms returned for expression: " + terms.size());
  		}
  		return terms;
  	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Returns term (function, color, number, percent, string, identificator)
 */
Term term() :
{/*@bgen(jjtree) term */
        SimpleNode jjtn000 = new SimpleNode(JJTTERM);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	
	Term term = null;
	int unary = 1;
	String value = null;
}
{/*@bgen(jjtree) term */
        try {
/*@egen*/
	try {
		[ unary = unary_operator() ]
		(	value = number() (<BLANK>)*/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ 
				{
					term = new TermNumberImpl(value, null, unary);	
				} | 
			value = percentage() (<BLANK>)*/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ 
				{
					term = new TermPercentImpl(value, unary);
				} | 
   			value = lengthpx() (<BLANK>)*/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ 
   				{ 
   					term = new TermNumberImpl(value, TermNumber.Unit.px, unary); 
   				} | 
   			value = lengthcm() (<BLANK>)*/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ 
   				{
   					term = new TermNumberImpl(value, TermNumber.Unit.cm, unary);
   				} |  
   			value = lengthmm() (<BLANK>)*/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/
   				{
   					term = new TermNumberImpl(value, TermNumber.Unit.mm, unary);
   				} | 
	    	value = lengthpt() (<BLANK>)*/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ 
	    		{
	    			term = new TermNumberImpl(value, TermNumber.Unit.pt, unary);
	    		} | 
    		value = lengthpc() (<BLANK>)*/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ 
    			{
    				term = new TermNumberImpl(value, TermNumber.Unit.pc, unary);
    			} | 
    		value = ems() (<BLANK>)*/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ 
    			{
    				term = new TermNumberImpl(value, TermNumber.Unit.em, unary);
    			} | 
    		value = exs() (<BLANK>)*/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ 
    			{
    				term = new TermNumberImpl(value, TermNumber.Unit.ex, unary);
    			} | 
    		value = angledeg() (<BLANK>)*/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ 
    			{
    				term = new TermNumberImpl(value, TermNumber.Unit.deg, unary);
    			} |
    		value = anglerad() (<BLANK>)*/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ 
    			{
    				term = new TermNumberImpl(value, TermNumber.Unit.rad, unary);
    			} | 
	    	value = anglegrad() (<BLANK>)*/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ 
	    		{
	    			term = new TermNumberImpl(value, TermNumber.Unit.grad, unary);
	    		} |
    		value = timems() (<BLANK>)*/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ 
    			{
    				term = new TermNumberImpl(value, TermNumber.Unit.ms, unary);
    			} |
    		value = times() (<BLANK>)*/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ 
    			{
    				term = new TermNumberImpl(value, TermNumber.Unit.s, unary);
    			} | 
    		value = freqhz() (<BLANK>)*/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ 
    			{
    				term = new TermNumberImpl(value, TermNumber.Unit.hz, unary);
    			} | 
    		value = freqkhz() (<BLANK>)*/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ 
    			{
    				term = new TermNumberImpl(value, TermNumber.Unit.khz, unary);
    			}
   		) | 
   		value = string() (<BLANK>)*/*@bgen(jjtree)*/
                                                {
                                                  jjtree.closeNodeScope(jjtn000, true);
                                                  jjtc000 = false;
                                                }
/*@egen*/	{ term = new TermStringImpl(value);	} | 
   		value = ident() (<BLANK>)*/*@bgen(jjtree)*/
                                           {
                                             jjtree.closeNodeScope(jjtn000, true);
                                             jjtc000 = false;
                                           }
/*@egen*/ { term = new TermIdentImpl(value); } | 
   		value = uri() (<BLANK>)*/*@bgen(jjtree)*/
                                         {
                                           jjtree.closeNodeScope(jjtn000, true);
                                           jjtc000 = false;
                                         }
/*@egen*/ { term = new TermUriImpl(value);} | 
   		value = hexcolor()/*@bgen(jjtree)*/
                                   {
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                   }
/*@egen*/ { term = TermColorImpl.getColorByHash(value); } | 
   		term = function() 
   		
   	}
   	catch(ParseException e) {
   		errorSkipTo("Failed getting term", SEMICOLON, NL);
   		return null;
   	}
   	catch(IllegalArgumentException e) {
   		if(log.isInfoEnabled()) 
   			log.info("Failed to set term: " + e);  
   		return null;
   	}
   	finally {
   	
   		// check color and replace
   		Term colorTerm = null;
   		if(term instanceof TermIdent) {
   			colorTerm = TermColorImpl.getColorByIdent((TermIdent)term);
   			if (colorTerm != null)
   				term = colorTerm;
   		}
   		else if(term instanceof TermFunction) {
   			colorTerm = TermColorImpl.getColorByFunction((TermFunction)term);
   			if(colorTerm != null)
   				term = colorTerm;
   		}
   	
   		if(log.isTraceEnabled()) {
   			log.trace("Having term: " 
   				+ term + ", value: " 
   				+ "(" + unary 
   				+ ")"+ value);
   		}
   		return term;
   	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Returns function
 */
TermFunction function() :
{/*@bgen(jjtree) function */
        SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String functionName = null;
	List<Term> terms = null;
	TermFunction function = new TermFunctionImpl();
}
{/*@bgen(jjtree) function */
        try {
/*@egen*/
	try {
  		functionName = function_begin() 
  			{
  				if(functionName!=null)
  					function.setFunctionName(functionName);
  			}
  		(<BLANK>)* 
  		terms=expr() 
  			{
  				function.setTerms(terms);
  			} 
  		<RPAREN> 
  		(<BLANK>)*
  	}
  	catch (ParseException e) {
  		errorSkipTo("Unable to get function", BLANK, SEMICOLON, RPAREN);
  	}
  	finally {
  	
  		if(log.isDebugEnabled()) {
  			log.debug("Matched function: " + function);
  		}
  	
  		return function; 
  	}/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Unary minus
 */
String minus() :
{/*@bgen(jjtree) minus */
  SimpleNode jjtn000 = new SimpleNode(JJTMINUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) minus */
               try {
/*@egen*/ t=<MINUS>/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/		{ return t.image; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/ }


/**
 * Name of function
 */
String function_begin() :  
{/*@bgen(jjtree) function_begin */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION_BEGIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) function_begin */
               try {
/*@egen*/ t=<FUNCTION>/*@bgen(jjtree)*/
                                        {
                                          jjtree.closeNodeScope(jjtn000, true);
                                          jjtc000 = false;
                                        }
/*@egen*/		{ return t.image; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/ }

/**
 * SimpleSelector operator
 */
SimpleSelector.Operator equal() :      
{/*@bgen(jjtree) equal */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUAL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) equal */
        try {
/*@egen*/	<EQUAL>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ 	{ return SimpleSelector.Operator.EQUALS; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ }

/**
 * SimpleSelector operator
 */
SimpleSelector.Operator includes() :   
{/*@bgen(jjtree) includes */
  SimpleNode jjtn000 = new SimpleNode(JJTINCLUDES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) includes */
        try {
/*@egen*/	<INCLUDES>/*@bgen(jjtree)*/
                        {
                          jjtree.closeNodeScope(jjtn000, true);
                          jjtc000 = false;
                        }
/*@egen*/ 	{ return SimpleSelector.Operator.INCLUDES; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ }

/**
 * SimpleSelector operator
 */
SimpleSelector.Operator dashmatch() :  
{/*@bgen(jjtree) dashmatch */
  SimpleNode jjtn000 = new SimpleNode(JJTDASHMATCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) dashmatch */
        try {
/*@egen*/	<DASHMATCH>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                    }
/*@egen*/ { return SimpleSelector.Operator.DASHMATCH; }/*@bgen(jjtree)*/
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/ }

/**
 * Operator comma for terms
 */
Term.Operator comma() :  
{/*@bgen(jjtree) comma */
  SimpleNode jjtn000 = new SimpleNode(JJTCOMMA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) comma */
     try {
/*@egen*/ <COMMA>/*@bgen(jjtree)*/
             {
               jjtree.closeNodeScope(jjtn000, true);
               jjtc000 = false;
             }
/*@egen*/ { return Term.Operator.COMMA; }/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/ }

/**
 * Operator slash for terms
 */
Term.Operator slash() :
{/*@bgen(jjtree) slash */
  SimpleNode jjtn000 = new SimpleNode(JJTSLASH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) slash */
     try {
/*@egen*/ "/"/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
         }
/*@egen*/ { return Term.Operator.SLASH; }/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/ }


/**
 * Returns text represenatation of hex color
 */
String hexcolor() :
{/*@bgen(jjtree) hexcolor */
        SimpleNode jjtn000 = new SimpleNode(JJTHEXCOLOR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String hex = null;
}
{/*@bgen(jjtree) hexcolor */
  try {
/*@egen*/
  hex = hash() (<BLANK>)*/*@bgen(jjtree)*/
                          {
                            jjtree.closeNodeScope(jjtn000, true);
                            jjtc000 = false;
                          }
/*@egen*/ { return hex; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


/**
 * Identificator
 * @return Text name of identificator
 */
String ident() : 
{/*@bgen(jjtree) ident */
  SimpleNode jjtn000 = new SimpleNode(JJTIDENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) ident */
                try {
/*@egen*/	t = <IDENT>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/	{ return t.image; }/*@bgen(jjtree)*/
                } finally {
                  if (jjtc000) {
                    jjtree.closeNodeScope(jjtn000, true);
                  }
                }
/*@egen*/ }


/**
 * String value
 */
String string() :   
{/*@bgen(jjtree) string */
  SimpleNode jjtn000 = new SimpleNode(JJTSTRING);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) string */
               try {
/*@egen*/ t=<STRING>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/	{ return t.image; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/ }

/**
 * URI value
 */
String uri() :      
{/*@bgen(jjtree) uri */
  SimpleNode jjtn000 = new SimpleNode(JJTURI);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) uri */
               try {
/*@egen*/ t=<URI>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/		{ return t.image; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/ }

/**
 * String or URI value
 */
String string_or_uri():
{/*@bgen(jjtree) string_or_uri */
        SimpleNode jjtn000 = new SimpleNode(JJTSTRING_OR_URI);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
/*@egen*/
	String value = null;
}
{/*@bgen(jjtree) string_or_uri */
        try {
/*@egen*/
	value = string()/*@bgen(jjtree)*/
                         {
                           jjtree.closeNodeScope(jjtn000, true);
                           jjtc000 = false;
                         }
/*@egen*/ { return value;} | value = uri()/*@bgen(jjtree)*/
                                                          {
                                                            jjtree.closeNodeScope(jjtn000, true);
                                                            jjtc000 = false;
                                                          }
/*@egen*/ { return value; }/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

/**
 * Numerical value
 */
String number() :     
{/*@bgen(jjtree) number */
  SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) number */
               try {
/*@egen*/ t=<NUMBER>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/	{ return t.image; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/ }

/**
 * Percentage value
 */
String percentage() : 
{/*@bgen(jjtree) percentage */
  SimpleNode jjtn000 = new SimpleNode(JJTPERCENTAGE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) percentage */
               try {
/*@egen*/ t=<PERCENTAGE>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/	{ return t.image; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/ } 

/**
 * Lenght in pixels
 */
String lengthpx() :   
{/*@bgen(jjtree) lengthpx */
  SimpleNode jjtn000 = new SimpleNode(JJTLENGTHPX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) lengthpx */
               try {
/*@egen*/ t=<LENGTHPX>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/	{ return t.image; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/ }

/**
 * Lenght in centimeters
 */
String lengthcm() :   
{/*@bgen(jjtree) lengthcm */
  SimpleNode jjtn000 = new SimpleNode(JJTLENGTHCM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) lengthcm */
               try {
/*@egen*/ t=<LENGTHCM>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/	{ return t.image; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/ }

/**
 * Lenght in milimeters
 */
String lengthmm() :   
{/*@bgen(jjtree) lengthmm */
  SimpleNode jjtn000 = new SimpleNode(JJTLENGTHMM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) lengthmm */
               try {
/*@egen*/ t=<LENGTHMM>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/	{ return t.image; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/ }

/**
 * Length in point size
 */
String lengthpt() :   
{/*@bgen(jjtree) lengthpt */
  SimpleNode jjtn000 = new SimpleNode(JJTLENGTHPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) lengthpt */
               try {
/*@egen*/ t=<LENGTHPT>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/	{ return t.image; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/ }

/**
 * Lenght in pc
 */ 
String lengthpc() :   
{/*@bgen(jjtree) lengthpc */
  SimpleNode jjtn000 = new SimpleNode(JJTLENGTHPC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) lengthpc */
               try {
/*@egen*/ t=<LENGTHPC>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/	{ return t.image; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/ }

/**
 * Length in ems
 */
String ems() :
{/*@bgen(jjtree) ems */
  SimpleNode jjtn000 = new SimpleNode(JJTEMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) ems */
               try {
/*@egen*/ t=<EMS>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/		{ return t.image; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/ }

/**
 * Lenght in exs
 */
String exs() :
{/*@bgen(jjtree) exs */
  SimpleNode jjtn000 = new SimpleNode(JJTEXS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) exs */
               try {
/*@egen*/ t=<EXS>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/		{ return t.image; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/ }

/**
 * Length in deg	
 */
String angledeg() :   
{/*@bgen(jjtree) angledeg */
  SimpleNode jjtn000 = new SimpleNode(JJTANGLEDEG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) angledeg */
               try {
/*@egen*/ t=<ANGLEDEG>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/	{ return t.image; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/ }

/**
 * Length in rad
 */
String anglerad() :
{/*@bgen(jjtree) anglerad */
  SimpleNode jjtn000 = new SimpleNode(JJTANGLERAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) anglerad */
               try {
/*@egen*/ t=<ANGLERAD>/*@bgen(jjtree)*/
                            {
                              jjtree.closeNodeScope(jjtn000, true);
                              jjtc000 = false;
                            }
/*@egen*/ { return t.image; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/ }

/**
 * Length in grad
 */
String anglegrad() :  
{/*@bgen(jjtree) anglegrad */
  SimpleNode jjtn000 = new SimpleNode(JJTANGLEGRAD);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) anglegrad */
               try {
/*@egen*/ t=<ANGLEGRAD>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/	{ return t.image; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/ }

/**
 * Time in milliseconds
 */
String timems() : 
{/*@bgen(jjtree) timems */
  SimpleNode jjtn000 = new SimpleNode(JJTTIMEMS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) timems */
               try {
/*@egen*/ t=<TIMEMS>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/	{ return t.image; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/ }

/**
 * Time in seconds
 */
String times() :      
{/*@bgen(jjtree) times */
  SimpleNode jjtn000 = new SimpleNode(JJTTIMES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) times */
               try {
/*@egen*/ t=<TIMES>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/	{ return t.image; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/ }

/**
 * Frequency in Hz
 */	
String freqhz() :     
{/*@bgen(jjtree) freqhz */
  SimpleNode jjtn000 = new SimpleNode(JJTFREQHZ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) freqhz */
               try {
/*@egen*/ t=<FREQHZ>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/	{ return t.image; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/ }

/**
 * Frequency in kHz
 */
String freqkhz() :    
{/*@bgen(jjtree) freqkhz */
  SimpleNode jjtn000 = new SimpleNode(JJTFREQKHZ);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) freqkhz */
               try {
/*@egen*/ t=<FREQKHZ>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/ 	{ return t.image; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/ }

/**
 * Hash-prefixed value
 */
String hash() :       
{/*@bgen(jjtree) hash */
  SimpleNode jjtn000 = new SimpleNode(JJTHASH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/ Token t; } {/*@bgen(jjtree) hash */
               try {
/*@egen*/ t=<HASH>/*@bgen(jjtree)*/
                                {
                                  jjtree.closeNodeScope(jjtn000, true);
                                  jjtc000 = false;
                                }
/*@egen*/		{ return t.image; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc000) {
                   jjtree.closeNodeScope(jjtn000, true);
                 }
               }
/*@egen*/ }


/**
 * Returns plus combinator
 */
SimpleSelector.Combinator plus() : 
{/*@bgen(jjtree) plus */
  SimpleNode jjtn000 = new SimpleNode(JJTPLUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}	{/*@bgen(jjtree) plus */
          try {
/*@egen*/ <PLUS>/*@bgen(jjtree)*/
                  {
                    jjtree.closeNodeScope(jjtn000, true);
                    jjtc000 = false;
                  }
/*@egen*/  { return SimpleSelector.Combinator.ADJACENT;}/*@bgen(jjtree)*/
          } finally {
            if (jjtc000) {
              jjtree.closeNodeScope(jjtn000, true);
            }
          }
/*@egen*/ }

/**
 * Returns greater combinator
 */
SimpleSelector.Combinator greater():
{/*@bgen(jjtree) greater */
  SimpleNode jjtn000 = new SimpleNode(JJTGREATER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/} {/*@bgen(jjtree) greater */
     try {
/*@egen*/ <GREATER>/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                }
/*@egen*/	{ return SimpleSelector.Combinator.CHILD;}/*@bgen(jjtree)*/
     } finally {
       if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
     }
/*@egen*/ }
