/* Počáteční nastavení některých parametrů */
options {
  JAVA_UNICODE_ESCAPE = false;
  UNICODE_INPUT = true;
  IGNORE_CASE = true;
}


/* Definice API */
PARSER_BEGIN(CssParser)

package cz.vutbr.web.css.parser;

import java.io.*;

public class CssParser {
  public static SimpleNode parse(InputStream in) throws ParseException {
    CssParser t = new CssParser(in);
    SimpleNode n = t.Start();
    return n;
  }

  public static SimpleNode parse(String in) throws ParseException {
    byte currentBytes[] = in.getBytes();
    CssParser t = new CssParser(new ByteArrayInputStream(currentBytes));
    SimpleNode n = t.Start();
    return n;
  }
}

PARSER_END(CssParser)

/* Direktiva pro vynechání komentářů zapsaných pomocí lomítko-hvězdička */
SKIP :
{
  <SLASH_STAR_COMMENT: "/*" (~["*"])* ("*")+ (~["/","*"] (~["*"])* ("*")+)* "/" >
}

/* Popis terminálních symbolů pro lexikální analyzátor */
TOKEN : 
{
  <#h : ["0"-"9", "a"-"f"]> |
  <#nonascii : ["\200"-"\377"]> |
  <#unicode : "\\" <h> (<h>)? (<h>)? (<h>)? (<h>)? (<h>)? ("\r\n"|[" ", "\t", "\r", "\n", "\f"])? > |
  <#escape : <unicode> | "\\" ~["\r", "\n", "\f", "0"-"9", "a"-"f"]> |
  <#nmstart : ["_", "a"-"z"] | <nonascii> | <escape>> |
  <#nmchar : ["_", "a"-"z", "0"-"9", "-"] | <nonascii> | <escape>> |
  <#string1 : "\"" (~["\n", "\r", "\f", "\""] | "\\" <nl> | <escape>)* "\""> |
  <#string2 : "'" (~["\n", "\r", "\f", "'"] | "\\" <nl> | <escape>)* "'"> |
  <#invalid1 : "\""(~["\n", "\r", "\f", "\""] | "\\" <nl> | <escape>)* > |
  <#invalid2	: "'"(~["\n", "\r", "\f", "'"] | "\\" <nl> | <escape>)* > |

  <#comment : "/*" (~["*"])* ("*")+ (~["/","*"] (~["*"])* ("*")+)* "/" > |
  <#ident : ("-")? <nmstart> (<nmchar>)* > |
  <#name : (<nmchar>)+ > |
  <#num : (["0"-"9"])+ | (["0"-"9"])* "." (["0"-"9"])+ > |
  <#string : <string1>|<string2> > |
  <#invalid : <invalid1>|<invalid2> > |
  <#url : ([";", "!", "#", "$", "%", "&", "*", "-", "~", ".", "/", ":", ",", "=", "?"] | <nmchar> )* > | 
  <#ss : ([" ", "\t", "\r", "\n", "\f"])+ > |
  <#w : (<ss>)? > |

  <#nl : "\n" | "\r\n" | "\r" | "\f"> |

  <#A : "a" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("41" | "61")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? > |
  <#C : "c" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("43" | "63")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? > |
  <#D : "d" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("44" | "64")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? > |
  <#E : "e" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("45" | "65")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? > |
  <#G : "g" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("47" | "67")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\g"> |
  <#H : "h" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("48" | "68")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\h"> |
  <#I : "i" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("49" | "69")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\i"> |
  <#K : "k" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("4b" | "6b")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\k"> |
  <#M : "m" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("4d" | "6d")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\m"> |
  <#N : "n" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("4e" | "6e")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\n"> |
  <#O : "o" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("51" | "71")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\o"> |
  <#P : "p" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("50" | "70")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\p"> |
  <#R : "r" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("52" | "72")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\r"> |
  <#S : "s" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("53" | "73")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\s"> |
  <#T : "t" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("54" | "74")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\t"> |
  <#X : "x" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("58" | "78")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\x"> |
  <#Z : "z" | ("\\0")? ("\\0")? ("\\0")? ("\\0")? ("5a" | "7a")  ("\r\n" | [" ", "\t", "\r", "\n", "\f"]) ? | "\\z"> |

  <BLANK : <ss> > |

  <CDO : "<!--" > |
  <CDC : "-->" > |
  <EQUAL : "=" > |
  <INCLUDES : "~=" > |
  <DASHMATCH : "|=" > |

  <LBRACE : <w> "{" > |
  <PLUS : <w> "+" > |
  <MINUS : <w> "-" > |
  <GREATER : <w> ">" > |
  <COMMA : <w> "," > |
  <STRING : <string> > |
  <INVALID : <invalid> > |
  <IDENT : <ident> > |

  <HASH : "#" <name> > |

  <IMPORT_SYM : "@" <I> <M> <P> <O> <R> <T> > |
  <PAGE_SYM : "@" <P> <A> <G> <E> > |
  <MEDIA_SYM : "@" <M> <E> <D> <I> <A> > |
  <CHARSET_SYM : "@" <C> <H> <A> <R> <S> <E> <T> > |

  <IMPORTANT_SYM : "!" (<w>|<comment>)* <I> <M> <P> <O> <R> <T> <A> <N> <T> > |

  <EMS : <num> "em" > |
  <EXS : <num> "ex" > |
  <LENGTHPX : <num> "px" > | 
  <LENGTHCM : <num> "cm" > | 
  <LENGTHMM : <num> "mm" > | 
  <LENGTHPT : <num> "pt" > | 
  <LENGTHPC : <num> "pc" > |
  <ANGLEDEG : <num> "deg" > | 
  <ANGLERAD : <num> "rad" > |
  <ANGLEGRAD : <num> "grad" > |
  <TIMEMS : <num> "ms" > |
  <TIMES : <num> "s" > |
  <FREQHZ : <num> "hz" > |
  <FREQKHZ : <num> "khz" > | 

  <DIMENSION : <num> <ident> > |

  <PERCENTAGE : <num> "%" > |
  <NUMBER : <num> > |

  <URI : ("url(" <w> <string> <w> ")") | ("url("<w> <url> <w> ")") > |
  <FUNCTION : <ident> "(" >
}


/* Přepisovací pravidla */
SimpleNode Start() :
{}
{
  stylesheet() <EOF>
  { return jjtThis; }
}

void stylesheet() :
{}
{
  ( charset() )?
  (<BLANK> | <CDO> | <CDC>)* ( import_a() (<BLANK> | <CDO> | <CDC> )* )*
  ( ( ruleset() | media() | page() ) (<BLANK> | <CDO> | <CDC>)* )*
  /* Reseni bez Lookahead, bohuzel pomalejsi */
  /*( ( ruleset() | media() | page() ) [<CDO> (<BLANK> | <CDO> | <CDC>)* | <CDC> (<BLANK> | <CDO> | <CDC>)*] )*  */
}

void import_a() :
{}
{
  <IMPORT_SYM> (<BLANK>)*
  [string() | uri()] (<BLANK>)* ( medium() (<COMMA> (<BLANK>)* medium())* )? ";" (<BLANK>)*
}

void media() :
{}
{
  <MEDIA_SYM> (<BLANK>)* medium() ( <COMMA> (<BLANK>)* medium() )* <LBRACE> (<BLANK>)* (ruleset())* "}" (<BLANK>)*
}

void medium() :
{}
{
  ident() (<BLANK>)*
}

void page() :
{}
{
  <PAGE_SYM> (<BLANK>)* (pseudo_page())? (<BLANK>)*
    <LBRACE> (<BLANK>)* declaration() ( ";" (<BLANK>)* declaration() )* "}" (<BLANK>)*
}

void pseudo_page() :
{}
{
  ":" ident()
}

void operator() :
{}
{
  ( slash() (<BLANK>)* | comma() (<BLANK>)* )?
}

void combinator() :
{}
{
  plus() (<BLANK>)* | greater() (<BLANK>)* | <BLANK>
}

void unary_operator() :
{}
{
  minus() | plus()
}

void property() :
{}
{
  ident() (<BLANK>)*
}

void ruleset() :
{}
{
  selector() ( <COMMA> (<BLANK>)* selector() )*
  <LBRACE> (<BLANK>)* declaration() ( ";" (<BLANK>)* declaration() )* "}" (<BLANK>)*
}

void selector() :
{}
{
  simple_selector() ( combinator() simple_selector() )*
}

void simple_selector() :
{}
{
  element_name() ( hash() | class_a() | attrib() | pseudo() )*
  | ( hash() | class_a() | attrib() | pseudo() )+
}

void class_a() :
{}
{
  "." ident()
}

void element_name() :
{}
{
  ident() | "*"
}

void attrib() :
{}
{
  "[" (<BLANK>)* ident() (<BLANK>)* [ (equal() | includes() | dashmatch() ) (<BLANK>)*
    ( ident() | string() ) (<BLANK>)* ] "]"
}

void pseudo() :
{}
{
  ":" ( ident() | pfunction() )
}

void pfunction() :
{}
{
  function_begin() (<BLANK>)* [ident()] (<BLANK>)* ")"
}

void declaration() :
{}
{
  (property() ":" (<BLANK>)* expr() (prio())?)?
}

void prio() :
{}
{
  <IMPORTANT_SYM> (<BLANK>)*
}

void expr() :
{}
{
  term() ( operator() term() )*
}

void term() :
{}
{
  [ unary_operator() ]
    ( number() (<BLANK>)* | percentage() (<BLANK>)* | lengthpx() (<BLANK>)* | lengthcm() (<BLANK>)* | lengthmm() (<BLANK>)* | 
      lengthpt() (<BLANK>)* | lengthpc() (<BLANK>)* | ems() (<BLANK>)* | exs() (<BLANK>)* | angledeg() (<BLANK>)* | anglerad() (<BLANK>)* | anglegrad() (<BLANK>)* |
      timems() (<BLANK>)* | times() (<BLANK>)* | freqhz() (<BLANK>)* | freqkhz() (<BLANK>)* )
    | string() (<BLANK>)* | ident() (<BLANK>)* | uri() (<BLANK>)* | hexcolor() | function()
}

void function() :
{}
{
  function_begin() (<BLANK>)* expr() ")" (<BLANK>)*
}

void hexcolor() :
{}
{
  hash() (<BLANK>)*
}

void charset() :
{}
{
  <CHARSET_SYM> string() ";"
}

void equal() :      
{} 
{ 
    <EQUAL>
}

void includes() :   
{} 
{
    <INCLUDES>
}

void dashmatch() :  
{} 
{
    <DASHMATCH>
}

void comma() :  
{} 
{
    <COMMA>
}

void slash() :
{}
{
    "/"
}

/* Výpis terminálních symbolů, u kterých je třeba znát jejich obsah */
void hash() :       { Token t; } { t=<HASH>        { jjtThis.setImage(t.image); } }
void ident() :      { Token t; } { t=<IDENT>       { jjtThis.setImage(t.image); } }
void string() :     { Token t; } { t=<STRING>      { jjtThis.setImage(t.image); } }
void uri() :        { Token t; } { t=<URI>         { jjtThis.setImage(t.image); } }
void number() :     { Token t; } { t=<NUMBER>      { jjtThis.setImage(t.image); } }
void percentage() : { Token t; } { t=<PERCENTAGE>  { jjtThis.setImage(t.image); } }
void lengthpx() :   { Token t; } { t=<LENGTHPX>    { jjtThis.setImage(t.image); } }
void lengthcm() :   { Token t; } { t=<LENGTHCM>    { jjtThis.setImage(t.image); } }
void lengthmm() :   { Token t; } { t=<LENGTHMM>    { jjtThis.setImage(t.image); } }
void lengthpt() :   { Token t; } { t=<LENGTHPT>    { jjtThis.setImage(t.image); } }
void lengthpc() :   { Token t; } { t=<LENGTHPC>    { jjtThis.setImage(t.image); } }
void ems() :        { Token t; } { t=<EMS>         { jjtThis.setImage(t.image); } }
void exs() :        { Token t; } { t=<EXS>         { jjtThis.setImage(t.image); } }
void angledeg() :   { Token t; } { t=<ANGLEDEG>    { jjtThis.setImage(t.image); } }
void anglerad() :   { Token t; } { t=<ANGLERAD>    { jjtThis.setImage(t.image); } }
void anglegrad() :  { Token t; } { t=<ANGLEGRAD>   { jjtThis.setImage(t.image); } }
void timems() :     { Token t; } { t=<TIMEMS>      { jjtThis.setImage(t.image); } }
void times() :      { Token t; } { t=<TIMES>       { jjtThis.setImage(t.image); } }
void freqhz() :     { Token t; } { t=<FREQHZ>      { jjtThis.setImage(t.image); } }
void freqkhz() :    { Token t; } { t=<FREQKHZ>     { jjtThis.setImage(t.image); } }
void plus() :       { Token t; } { t=<PLUS>        { jjtThis.setImage(t.image); } }
void minus() :      { Token t; } { t=<MINUS>       { jjtThis.setImage(t.image); } }
void greater():     { Token t; } { t=<GREATER>     { jjtThis.setImage(t.image); } }
void function_begin() :  { Token t; } { t=<FUNCTION>       { jjtThis.setImage(t.image); } }

